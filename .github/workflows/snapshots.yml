name: Website Snapshots & Kalender

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    env:
      PROJECT_NAME: "Website"
      URL_470: ${{ secrets.PHANTOMJS_URL_470 }}
      URL_166: ${{ secrets.PHANTOMJS_URL_166 }}
      URL_287: ${{ secrets.PHANTOMJS_URL_287 }}
      ICS_URL: ${{ secrets.ICS_CALENDAR_URL }}

    steps:
      - name: 1. Repository auschecken
        uses: actions/checkout@v4

      - name: 2. Python-Umgebung einrichten
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 3. Python-Abhängigkeiten installieren
        run: pip install requests icalendar python-dateutil

      - name: 4. Verzeichnisse vorbereiten und BASE_URL setzen
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p public/470-842-351 public/166-544-332 public/287-953-334 public/calendar
          : > public/.nojekyll
          echo "TS=$(date -u +%Y%m%d%H%M%S)" >> "$GITHUB_ENV"
          OWNER_LOWER="$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')"
          REPO_LOWER="$(echo "${GITHUB_REPOSITORY#*/}" | tr '[:upper:]' '[:lower:]')"
          if [ "${REPO_LOWER}" = "${OWNER_LOWER}.github.io" ]; then
            echo "BASE_URL=https://${OWNER_LOWER}.github.io" >> "$GITHUB_ENV"
          else
            echo "BASE_URL=https://${OWNER_LOWER}.github.io/${REPO_LOWER}" >> "$GITHUB_ENV"
          fi

      - name: 5. Kalender-HTML erstellen
        run: python .github/workflows/erstelle_kalender.py

      - name: 6. Helfer-Skript für Snapshots erstellen
        shell: bash
        run: |
          set -euo pipefail
          cat > safe_fetch.sh << 'SH'
          #!/usr/bin/env bash
          set -euo pipefail
          ID="$1"; REMOTE="$2"; BASE="$3"; TS="$4"
          OUTDIR="public/${ID}"
          IMG="${OUTDIR}/image.png"
          TMP="${OUTDIR}/.new.png"
          mkdir -p "${OUTDIR}"
          # Vorhandenes Bild vom veröffentlichten Stand übernehmen
          curl -fsSL "${BASE}/${ID}/image.png" -o "${IMG}" || true
          # Neues Bild laden
          if curl -fSL --connect-timeout 15 --max-time 90 --retry 2 --retry-delay 2 "${REMOTE}" -o "${TMP}"; then
            TYPE="$(file -b --mime-type "${TMP}" || true)"
            SIZE="$(stat -c%s "${TMP}" 2>/dev/null || echo 0)"
            if [ "${TYPE}" = "image/png" ] && [ "${SIZE}" -ge 20000 ]; then
              mv -f "${TMP}" "${IMG}"
            else
              rm -f "${TMP}"
            fi
          else
            rm -f "${TMP}" 2>/dev/null || true
          fi
          # Erstlauf-Fallback (schwarzes PNG), falls kein Bild vorhanden
          if [ ! -s "${IMG}" ]; then
            printf '%s' 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGNgYAAAAAMAAWgmWQ0AAAAASUVORK5CYII=' | base64 -d > "${IMG}"
          fi
          # Index-Seite schreiben
          {
            printf '%s\n' '<!doctype html><html lang="de"><head>'
            printf '%s\n' '<meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">'
            printf '%s\n' "<title>Snapshot ${ID}</title>"
            printf '%s\n' '<meta http-equiv="refresh" content="1800">'
            printf '%s\n' '<style>html,body{height:100%%;margin:0;background:#111;color:#eee;font-family:Arial,Helvetica,sans-serif}img{width:100%%;height:100%%;object-fit:contain;background:#000}</style>'
            printf '%s\n' '</head><body>'
            printf '%s\n' "  <img src=\"image.png?v=${TS}\" alt=\"Snapshot ${ID}\">"
            printf '%s\n' '</body></html>'
          } > "${OUTDIR}/index.html"
          SH
          chmod +x safe_fetch.sh

      - name: 7. Snapshot 470-842-351 aktualisieren
        run: ./safe_fetch.sh "470-842-351" "$URL_470" "$BASE_URL" "$TS"

      - name: 8. Snapshot 287-953-334 aktualisieren
        run: ./safe_fetch.sh "287-953-334" "$URL_287" "$BASE_URL" "$TS"

      - name: 9. Snapshot 166-544-332 aktualisieren
        run: ./safe_fetch.sh "166-544-332" "$URL_166" "$BASE_URL" "$TS"

      - name: 10. Haupt-Indexseite erstellen
        shell: bash
        run: |
          set -euo pipefail
          {
            printf '%s\n' '<!doctype html><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">'
            printf '%s\n' "<title>${PROJECT_NAME} Snapshots</title>"
            printf '%s\n' '<style>body{font-family:Arial,Helvetica,sans-serif;padding:24px;background:#111;color:#eee} a{color:#7bd} ul{line-height:1.8}</style>'
            printf '%s\n' '<h1>'"${PROJECT_NAME}"' Snapshots</h1>'
            printf '%s\n' '<ul>'
            printf '%s\n' '  <li><a href="./470-842-351/">Snapshot 470-842-351</a></li>'
            printf '%s\n' '  <li><a href="./287-953-334/">Snapshot 287-953-334</a></li>'
            printf '%s\n' '  <li><a href="./166-544-332/">Snapshot 166-544-332</a></li>'
            printf '%s\n' '  <li><a href="./calendar/">Kalender</a></li>'
            printf '%s\n' '</ul>'
          } > public/index.html

      - name: 11. Artefakt hochladen
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: 12. Auf GitHub Pages deployen
        id: deployment
        uses: actions/deploy-pages@v4
