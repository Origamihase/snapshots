name: riverty-snapshots

on:
  schedule:
    - cron: '*/30 * * * *'     # alle 30 Minuten
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  cache-and-publish:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    env:
      # Deine geprüften PhantomJsCloud-Links (PNG, 1920x1080)
      URL_470: "https://phantomjscloud.com/api/browser/v2/ak-vk3pd-7m0av-nbdmz-ybd6x-v37kj/?requestBase64=eyJ1cmwiOiJodHRwczovL291ci5yaXZlcnR5LmNvbS9zZS80NzAtODQyLTM1MSIsInJlbmRlclR5cGUiOiJwbmciLCJvdXRwdXRBc0pzb24iOmZhbHNlLCJyZXF1ZXN0U2V0dGluZ3MiOnsid2FpdEludGVydmFsIjo1MDAwfSwicmVuZGVyU2V0dGluZ3MiOnsidmlld3BvcnQiOnsid2lkdGgiOjE5MjAsImhlaWdodCI6MTA4MH0sImNsaXBSZWN0YW5nbGUiOnsidG9wIjowLCJsZWZ0IjowLCJ3aWR0aCI6MTkyMCwiaGVpZ2h0IjoxMDgwfSwiem9vbUZhY3RvciI6MX19"
      URL_166: "https://phantomjscloud.com/api/browser/v2/ak-vc67v-06nxp-vqp2q-hjynv-p9w5d/?requestBase64=eyJ1cmwiOiJodHRwczovL291ci5yaXZlcnR5LmNvbS9zZS8xNjYtNTQ0LTMzMiIsInJlbmRlclR5cGUiOiJwbmciLCJvdXRwdXRBc0pzb24iOmZhbHNlLCJyZXF1ZXN0U2V0dGluZ3MiOnsid2FpdEludGVydmFsIjo1MDAwfSwicmVuZGVyU2V0dGluZ3MiOnsidmlld3BvcnQiOnsid2lkdGgiOjE5MjAsImhlaWdodCI6MTA4MH0sImNsaXBSZWN0YW5nbGUiOnsidG9wIjowLCJsZWZ0IjowLCJ3aWR0aCI6MTkyMCwiaGVpZ2h0IjoxMDgwfSwiem9vbUZhY3RvciI6MX19"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare output & env (lowercase BASE_URL fix)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p public/470-842-351 public/166-544-332
          printf '' > public/.nojekyll
          echo "TS=$(date -u +%Y%m%d%H%M%S)" >> "$GITHUB_ENV"

          OWNER_LOWER="$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')"
          REPO_RAW="${GITHUB_REPOSITORY#*/}"
          REPO_LOWER="$(echo "${REPO_RAW}" | tr '[:upper:]' '[:lower:]')"
          echo "BASE_URL=https://${OWNER_LOWER}.github.io/${REPO_LOWER}" >> "$GITHUB_ENV"

      - name: Helper (safe fetch & publish)
        shell: bash
        run: |
          cat > safe_fetch.sh <<'SH'
          #!/usr/bin/env bash
          # usage: safe_fetch <id> <remote-url> <base-url> <timestamp>
          set -euo pipefail
          ID="$1"; REMOTE="$2"; BASE="$3"; TS="$4"
          OUTDIR="public/${ID}"
          IMG="${OUTDIR}/image.png"
          TMP="${OUTDIR}/.new.png"
          HDR="${OUTDIR}/.headers.txt"

          mkdir -p "${OUTDIR}"

          # 1) Vorhandenes Live-Bild (falls bereits deployed) lokal puffern (Lowercase-BASE_URL sichert 200)
          curl -fsSL "${BASE}/${ID}/image.png" -o "${IMG}" || true

          # 2) Neues Bild abrufen (sanfte Retries), Header speichern
          if curl -fSL --connect-timeout 15 --max-time 90 --retry 2 --retry-delay 2 \
               -D "${HDR}" "${REMOTE}" -o "${TMP}"; then
            TYPE="$(file -b --mime-type "${TMP}" || true)"
            SIZE="$(stat -c%s "${TMP}" 2>/dev/null || echo 0)"
            # Nur übernehmen, wenn klar PNG und plausibel groß (>= 20 KB)
            if [ "${TYPE}" = "image/png" ] && [ "${SIZE}" -ge 20000 ]; then
              mv -f "${TMP}" "${IMG}"
              echo "OK  [${ID}] PNG ${SIZE} bytes"
            else
              echo "WARN[${ID}] Ungültige Antwort (type=${TYPE} size=${SIZE}); behalte altes Bild."
              rm -f "${TMP}"
            fi
          else
            echo "WARN[${ID}] Abruf fehlgeschlagen; behalte altes Bild."
            rm -f "${TMP}" 2>/dev/null || true
          fi

          # 3) Falls (noch) kein Bild existiert: schwarzer 1x1 Platzhalter
          if [ ! -s "${IMG}" ]; then
            echo "INFO[${ID}] Platzhalter anlegen."
            # 1x1 schwarzes PNG
            echo 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mP8/x8AAusB9b5/2moAAAAASUVORK5CYII=' \
            | base64 -d > "${IMG}"
          fi

          # 4) HTML-Seite mit Cache-Buster
          cat > "${OUTDIR}/index.html" <<HTML
          <!doctype html><html lang="de"><head>
          <meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
          <title>Riverty ${ID}</title>
          <meta http-equiv="refresh" content="1800"> <!-- alle 30 Min neu laden -->
          <style>html,body{height:100%;margin:0;background:#000}
          img{position:fixed;inset:0;width:100%;height:100%;object-fit:contain;background:#000}</style>
          </head><body>
          <img src="image.png?v=${TS}" alt="Riverty ${ID}">
          </body></html>
          HTML
          SH
          chmod +x safe_fetch.sh

      - name: Update 470-842-351 (safe)
        shell: bash
        run: ./safe_fetch.sh "470-842-351" "$URL_470" "$BASE_URL" "$TS"

      - name: Update 166-544-332 (safe)
        shell: bash
        run: ./safe_fetch.sh "166-544-332" "$URL_166" "$BASE_URL" "$TS"

      - name: Index page
        shell: bash
        run: |
          cat > public/index.html <<HTML
          <!doctype html><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
          <title>Riverty Snapshots</title>
          <style>body{font-family:Arial,Helvetica,sans-serif;padding:24px;background:#111;color:#eee}
          a{color:#7bd}ul{line-height:1.8}</style>
          <h1>Riverty Snapshots</h1>
          <ul>
            <li><a href="./470-842-351/">470-842-351</a></li>
            <li><a href="./166-544-332/">166-544-332</a></li>
          </ul>
          HTML

      - name: Upload static artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
