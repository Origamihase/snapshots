name: riverty-snapshots

on:
  schedule:
    - cron: '*/15 * * * *'   # alle 15 Minuten
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  snap-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Playwright (Chromium)
        run: |
          npm init -y
          npm i -D playwright
          npx playwright install --with-deps chromium

      - name: Render snapshots (1920x1080 PNG) & build static pages
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p public
          cat > script.js <<'JS'
          const fs = require('fs');
          const path = require('path');
          const { chromium } = require('playwright');

          async function snap(id, url) {
            const outDir = path.join('public', id);
            fs.mkdirSync(outDir, { recursive: true });
            const imgPath  = path.join(outDir, 'image.png');
            const htmlPath = path.join(outDir, 'index.html');

            const browser = await chromium.launch({
              headless: true,
              args: [
                '--no-sandbox',
                '--disable-gpu',
                '--disable-dev-shm-usage',
                '--disable-blink-features=AutomationControlled',
                '--hide-scrollbars'
              ]
            });

            const ctx = await browser.newContext({
              viewport: { width: 1920, height: 1080 },
              deviceScaleFactor: 1,
              userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
              locale: 'en-US',
              colorScheme: 'light',
              javaScriptEnabled: true
            });

            // Headless-Detection minimieren
            await ctx.addInitScript(() => {
              Object.defineProperty(navigator, 'webdriver', { get: () => false });
            });

            const page = await ctx.newPage();

            // 1) Seite laden, bis Netz weitgehend ruhig ist
            await page.goto(url, { waitUntil: 'networkidle', timeout: 90000 });

            // 2) Auf Next-Container warten & Inhalt > 0
            await page.waitForSelector('#__next', { state: 'attached', timeout: 30000 });
            await page.waitForFunction(() => {
              const el = document.querySelector('#__next');
              return el && el.innerText && el.innerText.trim().length > 0;
            }, { timeout: 30000 });

            // 3) Mind. ein sichtbares Bild im Viewport geladen
            await page.waitForFunction(() => {
              const vp = { w: window.innerWidth, h: window.innerHeight };
              return Array.from(document.images).some(img => {
                if (!img.complete || img.naturalWidth === 0) return false;
                const r = img.getBoundingClientRect();
                return r.bottom > 0 && r.right > 0 && r.left < vp.w && r.top < vp.h;
              });
            }, { timeout: 30000 });

            // 4) Kurzer Puffer fÃ¼r Layout/Fonts
            await page.waitForTimeout(2000);

            // Screenshot (genau 1920x1080)
            await page.screenshot({
              path: imgPath,
              type: 'png',
              clip: { x: 0, y: 0, width: 1920, height: 1080 }
            });

            await browser.close();

            // Statische HTML-Seite ohne JS
            const html = `<!doctype html>
          <html lang="de"><head>
          <meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
          <title>Riverty ${id}</title>
          <meta http-equiv="refresh" content="900"> <!-- alle 15 Min neu laden -->
          <style>
            html,body{height:100%;margin:0;background:#000}
            img{position:fixed;inset:0;width:100%;height:100%;object-fit:contain;background:#000}
          </style>
          </head><body>
          <img src="image.png" alt="Riverty ${id}">
          </body></html>`;
            fs.writeFileSync(htmlPath, html);
          }

          (async () => {
            await snap('470-842-351', 'https://our.riverty.com/se/470-842-351');
            await snap('166-544-332', 'https://our.riverty.com/se/166-544-332');

            // Index & .nojekyll
            fs.writeFileSync('public/.nojekyll', '');
            fs.writeFileSync('public/index.html',
              '<!doctype html><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">'+
              '<title>Riverty Snapshots</title>'+
              '<style>body{font-family:Arial,Helvetica,sans-serif;padding:24px;background:#111;color:#eee}a{color:#7bd}ul{line-height:1.8}</style>'+
              '<h1>Riverty Snapshots</h1>'+
              '<ul><li><a href="./470-842-351/">470-842-351</a></li><li><a href="./166-544-332/">166-544-332</a></li></ul>'
            );
          })().catch(e => { console.error(e); process.exit(1); });
          JS

          node script.js

      - name: Upload static artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
