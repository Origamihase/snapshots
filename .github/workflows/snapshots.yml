name: riverty-snapshots

on:
  schedule:
    - cron: '*/30 * * * *'   # alle 30 Minuten
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  snap-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Playwright (Chromium)
        run: |
          npm init -y
          npm i -D playwright
          npx playwright install --with-deps chromium

      - name: Render snapshots (1920x1080 PNG) & build static pages
        run: |
          mkdir -p public
          cat > script.js <<'JS'
          const fs = require('fs');
          const path = require('path');
          const { chromium } = require('playwright');

          async function snap(id, url) {
            const outDir = path.join('public', id);
            fs.mkdirSync(outDir, { recursive: true });
            const imgPath   = path.join(outDir, 'image.png');
            const htmlPath  = path.join(outDir, 'index.html');
            const debugPath = path.join(outDir, 'debug.html');

            const browser = await chromium.launch({ headless: true, args: ['--no-sandbox'] });
            const ctx = await browser.newContext({
              viewport: { width: 1920, height: 1080 }
            });
            const page = await ctx.newPage();

            await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 90000 });

            // Warte auf Ãœberschrift im Content
            await page.waitForSelector('#__next h1, #__next h2', { state: 'visible', timeout: 60000 });

            // Warten bis ein Bild geladen ist
            await page.waitForFunction(() =>
              Array.from(document.images).some(img => img.complete && img.naturalWidth > 0),
              { timeout: 60000 }
            );

            // Debug speichern (HTML-Quelle nach Render)
            fs.writeFileSync(debugPath, await page.content(), 'utf8');

            await page.screenshot({ path: imgPath, type: 'png', fullPage: false });

            await browser.close();

            const html = `<!doctype html>
          <html lang="de"><head>
          <meta charset="utf-8">
          <meta http-equiv="refresh" content="1800">
          <title>Riverty ${id}</title>
          <style>
            html,body{margin:0;height:100%;background:#000}
            img{width:100%;height:100%;object-fit:contain}
          </style>
          </head><body>
          <img src="image.png" alt="Riverty ${id}">
          </body></html>`;
            fs.writeFileSync(htmlPath, html);
          }

          (async () => {
            await snap('470-842-351', 'https://our.riverty.com/se/470-842-351');
            await snap('166-544-332', 'https://our.riverty.com/se/166-544-332');
            fs.writeFileSync('public/.nojekyll', '');
            fs.writeFileSync('public/index.html', '<h1>Riverty Snapshots</h1><ul><li><a href="./470-842-351/">470-842-351</a></li><li><a href="./166-544-332/">166-544-332</a></li></ul>');
          })().catch(e => { console.error(e); process.exit(1); });
          JS

          node script.js

      - name: Upload static artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
